{"version":3,"file":"adminpresets_tree.min.js","sources":["../src/adminpresets_tree.js"],"sourcesContent":["/**\n * Show the tree of admins presets.\n *\n * @module     tool_admin_presets/tree\n * @copyright  2019 Pimenko <contact@pimenko.com>\n * @author     Jordan Kesraoui\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/ajax', 'core/tree', 'core/templates', 'jquery'], (Ajax, TreeAccessible, Templates, $) => {\n\n    /**\n     * NodeTree Object.\n     * @param {string} id  Id of the node.\n     * @param {string} settingId Id of the setting.\n     * @param {string} label Label of the setting.\n     * @param {string} description Description of the setting.\n     * @constructor\n     */\n    let NodeTree = function(id, settingId, label, description) {\n        this.id = id;\n        this.settingId = settingId;\n        this.label = label;\n        this.description = description;\n        this.parent = null;\n        this.displayed = false;\n        this.checked = true;\n        this.level = 1;\n        this.children = [];\n        this.padding = 0;\n    };\n\n    /**\n     * Return if the node has children or not.\n     *\n     * @return {boolean}\n     */\n    NodeTree.prototype.hasChildren = function() {\n        return this.children.length > 0;\n    };\n\n    /**\n     * Return if the node is empty (without children and is category type).\n     * @return {boolean}\n     */\n    NodeTree.prototype.isEmpty = function() {\n        return this.settingId === 'category' && !this.hasChildren();\n    };\n\n    /**\n     * Accessible Tree of settings.\n     *\n     * @param {string} rootNode Element Id of the root of the tree.\n     * @constructor\n     */\n    let Tree = function(rootNode) {\n        this.view = null;\n        this.nodes = [];\n        this.accessibleview = null;\n        this.rootNode = document.getElementById(rootNode);\n    };\n\n    /**\n     * Initialise the tree.\n     *\n     * @param {array} ids Array of setting ids.\n     * @param {array} nodeids Array of node ids.\n     * @param {array} labels Array of settings labels.\n     * @param {array} descriptions Arrays of settings descriptions.\n     * @param {array} parents Arrays of setings parents.\n     */\n    Tree.prototype.init = function(ids, nodeids, labels, descriptions, parents) {\n        let nelements = ids.length;\n\n        this.rootNode.innerHTML = \"\";\n        let promises = [];\n\n        // Add all nodes to the Tree.\n        for (let i = 0; i < nelements; i++) {\n\n            // Create a new node.\n            let newNode = new NodeTree(\n                nodeids[i],\n                ids[i],\n                decodeURIComponent(labels[i]),\n                decodeURIComponent(descriptions[i])\n            );\n\n            this.nodes[newNode.id] = newNode;\n        }\n\n        // Associate parents and children.\n        for (let i = 0; i < nelements; i++) {\n            if (parents[i] === 'root') {\n                this.nodes[nodeids[i]].parent = null;\n            } else {\n                this.nodes[nodeids[i]].parent = this.nodes[parents[i]];\n                this.nodes[parents[i]].children.push(this.nodes[nodeids[i]]);\n            }\n        }\n\n        // Display all parent nodes.\n        for (var key in this.nodes) {\n            if (this.nodes.hasOwnProperty(key)) {\n                if (this.nodes[key].parent === null) {\n                    promises.push(this.display(key));\n                }\n            }\n        }\n\n        // Make the tree accessible.\n        Promise.all(promises).finally(() => {\n            this.accessibleview = new TreeAccessible('#' + this.rootNode.getAttribute('id'));\n        }).catch(function(error) {\n            window.console.log(error);\n        });\n    };\n\n    /**\n     * Apply the events click on the element's node and his checkbox.\n     *\n     * @param {string} nodeId Id of the node.\n     */\n    Tree.prototype.applyEvent = function(nodeId) {\n        let node = this.nodes[nodeId];\n        // If the elements is displayed.\n        if (node.displayed) {\n\n            let elementNode = document.getElementById(nodeId);\n\n            // Display all children node when is the node is clicked.\n            elementNode.addEventListener('focus', () => {\n                if (node.hasChildren()) {\n\n                    let promises = [];\n                    node.children.forEach((nodeChild) => {\n                        promises.push(this.display(nodeChild.id));\n                    });\n\n                    // Make the node accessible.\n                    Promise.all(promises).finally(() => {\n                        this.accessibleview.initialiseNodes($('#' + nodeId));\n                    }).catch(function(error) {\n                        window.console.log(error);\n                    });\n                }\n            });\n\n            // Change the value of mark checked when a click on the checkbox.\n            let checkboxElement = document.getElementById(nodeId + '_checkbox');\n            checkboxElement.addEventListener('click', (event) => {\n                event.stopPropagation();\n                this.setChecked(nodeId, !node.checked);\n            });\n\n            // Change the value of mark checked when the enter key is pushed.\n            elementNode.addEventListener('keydown', (event) => {\n\n                switch (event.key) {\n\n                    case \"Enter\" : {\n\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        this.setChecked(nodeId, !node.checked);\n\n                        return;\n                    }\n\n                    case \"ArrowRight\": {\n\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        if (this.accessibleview.isGroupItem($(event.target))) {\n\n                            if (this.accessibleview.isGroupCollapsed($(event.target).find('a.collapse_link'))) {\n                                let collapselink = $(event.target).find('a.collapse_link').first();\n                                collapselink.click();\n\n                                let group = $(event.target).find(\"div[role=group]\").first();\n                                group.find(\"div[role=treeitem]\").first().focus();\n                            }\n\n                        }\n                        return;\n                    }\n\n                    case \"ArrowLeft\" : {\n\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        if (this.accessibleview.isGroupItem($(event.target))) {\n\n                            if (this.accessibleview.isGroupCollapsed($(event.target).find('a.collapse_link'))) {\n                                $(event.target).parents('div[role=treeitem]').first().focus();\n                            } else {\n                                let collapselink = $(event.target).find('a.collapse_link').first();\n                                collapselink.click();\n                                collapselink.parent().focus();\n                            }\n\n                        } else {\n                            $(event.target).parents('div[role=treeitem]').first().focus();\n                        }\n\n                        return;\n                    }\n\n                    case \"ArrowDown\" : {\n\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        if ($(event.target).data('setting') === true\n                            || this.accessibleview.isGroupCollapsed($(event.target).find('a.collapse_link'))) {\n\n                            let next = $(event.target).next();\n\n                            if (next.is(\":visible\")) {\n                                next.focus();\n                            } else if ($(event.target).next().length === 0) {\n                                let parentnext = $(event.target).parents('div[role=treeitem]');\n                                parentnext.next().focus();\n                            }\n                        } else {\n\n                            let group = $(event.target).find(\"div[role=group]\").first();\n                            group.find(\"div[role=treeitem]\").first().focus();\n                        }\n\n                        return;\n                    }\n\n                    case \"ArrowUp\": {\n\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        let prev = $(event.target).prev();\n\n                        if (prev.is(\":visible\")) {\n                            prev.focus();\n                        } else if ($(event.target).prev().length === 0) {\n                            let parent = $(event.target).parents('div[role=treeitem]');\n                            parent.focus();\n                        }\n                        return;\n                    }\n\n                }\n            });\n        }\n    };\n\n    /**\n     * Display the Node in the DOM (create DOM element).\n     *\n     * @param {string} nodeId Id of the node.\n     * @return {Promise}\n     */\n    Tree.prototype.display = function(nodeId) {\n        return new Promise((resolve, reject) => {\n            let node = this.nodes[nodeId];\n            // If the elements is not yet displayed.\n\n            if (!node.displayed && !node.isEmpty()) {\n                let parentElement = null;\n                // Take the root node of the tree if the Node hasn't parent.\n                if (node.parent === null) {\n                    parentElement = this.rootNode;\n                } else {\n                    parentElement = document.getElementById(node.parent.id).querySelector('div[role=group]');\n                    this.nodes[nodeId].level = this.nodes[node.parent.id].level + 1;\n                }\n\n                let haschildren = '';\n                if (node.hasChildren()) {\n                    haschildren = 'has-children';\n                }\n\n                let checked = false;\n                if (node.checked) {\n                    checked = true;\n                }\n\n                let issetting = false;\n\n                if (node.settingId === \"setting\") {\n                    issetting = true;\n                }\n\n                // Add the new node in the DOM.\n                // Calculate padding for element.\n                if (node.level > 1) {\n                    node.padding = 20 * (node.level - 1);\n\n                    if (issetting) {\n                        node.padding = node.padding + 15;\n                    }\n                }\n\n                // Get settings nbr.\n                let settingsnbr = 0;\n                if (node.hasChildren()) {\n                    let countsetting = 0;\n                    node.children.forEach((childNode) => {\n                        // Count checked child.\n                        countsetting = countsetting + this.getSettingsNbr(childNode.id);\n                    });\n                    settingsnbr = countsetting;\n                }\n\n                let newNode = {\n                    \"id\": node.id,\n                    \"level\": node.level,\n                    \"label\": node.label,\n                    \"has_children\": haschildren,\n                    \"checked\": checked,\n                    \"setting\": issetting,\n                    \"settingsnumber\": settingsnbr,\n                    \"padding\": node.padding\n                };\n\n                // Add the node in the DOM.\n                Templates.render('tool_admin_presets/tree_node', newNode).then((html) => {\n\n                    parentElement.insertAdjacentHTML('beforeend', html);\n\n                    // Mark the node displayed.\n                    this.nodes[nodeId].displayed = true;\n\n                    // Apply click event on the element.\n                    this.applyEvent(nodeId);\n\n                    // Add padding level.\n                    if (newNode.setting === true) {\n                        let escapeId = newNode.id.replace('@@', '\\\\@\\\\@');\n                        document.querySelectorAll('#' + escapeId + \" .admin_presets_tree_name\")[0]\n                            .style.padding = \"0px 0px 0px \" + newNode.padding + 'px';\n                    }\n\n                    return resolve(true);\n                }).catch(function(error) {\n                    reject(false);\n                    window.console.log(error);\n                });\n            } else {\n                resolve(true);\n            }\n        });\n    };\n\n    /**\n     * Get the settings number for this node and all child.\n     *\n     * @param {string} nodeId Id of the node.\n     *\n     * @return {int} settingsnbr nbr of settings.\n     */\n    Tree.prototype.getSettingsNbr = function(nodeId) {\n        let node = this.nodes[nodeId];\n\n        let countsettings = 0;\n\n        if (node.settingId === 'setting') {\n            countsettings++;\n        }\n\n        // Modify all children.\n        if (node.hasChildren()) {\n            node.children.forEach((childNode) => {\n                // Count checked child.\n                countsettings = countsettings + this.getSettingsNbr(childNode.id);\n            });\n        }\n\n        return countsettings;\n    };\n\n    /**\n     * Set the property checked on the node and his children.\n     *\n     * @param {string} nodeId Id of the node.\n     * @param {boolean} checked Checking status.\n     */\n    Tree.prototype.setChecked = function(nodeId, checked) {\n        let node = this.nodes[nodeId];\n        this.nodes[nodeId].checked = checked;\n\n        // Change the checkbox apparence.\n        if (node.displayed) {\n            let checkboxElement = document.getElementById(nodeId + '_checkbox');\n            // Check the node.\n            checkboxElement.checked = checked;\n\n            // Add or remove active class.\n            let escapeId = nodeId.replace('@@', '\\\\@\\\\@');\n            if (checked) {\n                document.querySelector('label[for=' + escapeId + '_checkbox' + ']').classList.add('active');\n            } else {\n                document.querySelector('label[for=' + escapeId + '_checkbox' + ']').classList.remove('active');\n            }\n        }\n\n        // Modify all children.\n        if (node.hasChildren()) {\n            node.children.forEach((childNode) => {\n                // Count checked child.\n                this.setChecked(childNode.id, checked);\n            });\n        }\n    };\n\n    /**\n     * Submit the settings to the form.\n     *\n     * @param {string} buttonId Id of submit button element.\n     */\n    Tree.prototype.submit = function(buttonId) {\n        let button = document.getElementById(buttonId);\n\n        // Event on click on the submit button.\n        button.addEventListener('click', () => {\n            let settingsPresetsForm = document.getElementById(\"settings_tree_div\");\n\n            // Create all hidden input with nodes checked.\n            for (let key in this.nodes) {\n                if (this.nodes.hasOwnProperty(key)) {\n                    let node = this.nodes[key];\n                    if (document.getElementById(node.id + '_checkbox')) {\n                        let settingInput = document.getElementById(node.id + '_checkbox');\n\n                        if (settingInput.checked) {\n                            settingInput.setAttribute('value', '1');\n                        }\n                    } else if (node.settingId !== 'category' && node.settingId !== 'page' && node.checked) {\n                        let settingInput = document.createElement('input');\n                        settingInput.setAttribute('type', 'hidden');\n                        settingInput.setAttribute('name', node.id);\n                        settingInput.setAttribute('value', '1');\n                        settingsPresetsForm.appendChild(settingInput);\n                    }\n                }\n            }\n        });\n    };\n\n    /**\n     * Removes all child DOM elements of the given node from the tab order.\n     *\n     * @method removeAllFromTabOrder\n     * @param {object} node jquery object representing a node.\n     */\n    TreeAccessible.prototype.removeAllFromTabOrder = function(node) {\n        node.find('*').attr('tabindex', '-1');\n        this.getGroupFromItem($(node)).find('*').attr('tabindex', '-1');\n    };\n\n    return {\n        init: (action) => {\n\n            if (action === 'export') {\n                this.ajaxmethodname = 'tool_admin_presets_get_settings';\n            }\n            // Call ajax functions to retrieve settings.\n            Ajax.call([{\n                methodname: this.ajaxmethodname,\n                args: {}\n            }], true, true)[0].done((response) => {\n\n                    // Make the tree with settings retrieved.\n                    let treesettings = new Tree('settings_tree_div');\n                    treesettings.init(\n                        response.settings.ids,\n                        response.settings.nodes,\n                        response.settings.labels,\n                        response.settings.descriptions,\n                        response.settings.parents);\n\n                    // Make the tree with settings retrieved.\n                    let treeplugins = new Tree('settingsplugin_tree_div');\n                    treeplugins.init(\n                        response.plugins.ids,\n                        response.plugins.nodes,\n                        response.plugins.labels,\n                        response.plugins.descriptions,\n                        response.plugins.parents);\n\n                    // Set the submit event.\n                    treesettings.submit('id_submitbutton');\n                    treeplugins.submit('id_submitbutton');\n                }\n            );\n        }\n    };\n});\n"],"names":["define","Ajax","TreeAccessible","Templates","$","NodeTree","id","settingId","label","description","parent","displayed","checked","level","children","padding","prototype","hasChildren","this","length","isEmpty","Tree","rootNode","view","nodes","accessibleview","document","getElementById","init","ids","nodeids","labels","descriptions","parents","nelements","innerHTML","promises","i","newNode","decodeURIComponent","push","key","hasOwnProperty","display","Promise","all","finally","getAttribute","catch","error","window","console","log","applyEvent","nodeId","node","elementNode","addEventListener","forEach","nodeChild","initialiseNodes","event","stopPropagation","setChecked","preventDefault","isGroupItem","target","isGroupCollapsed","find","first","click","focus","collapselink","data","next","is","prev","resolve","reject","parentElement","querySelector","haschildren","issetting","settingsnbr","countsetting","childNode","getSettingsNbr","render","then","html","insertAdjacentHTML","setting","escapeId","replace","querySelectorAll","style","countsettings","classList","add","remove","submit","buttonId","settingsPresetsForm","settingInput","setAttribute","createElement","appendChild","removeAllFromTabOrder","attr","getGroupFromItem","action","ajaxmethodname","call","methodname","args","done","response","treesettings","settings","treeplugins","plugins"],"mappings":"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"}