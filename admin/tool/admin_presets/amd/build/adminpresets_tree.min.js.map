{"version":3,"file":"adminpresets_tree.min.js","sources":["../src/adminpresets_tree.js"],"sourcesContent":["/**\n * Show the tree of admins presets.\n *\n * @module     tool_admin_presets/tree\n * @copyright  2019 Pimenko <contact@pimenko.com>\n * @author     Jordan Kesraoui\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['core/ajax', 'core/tree', 'core/templates', 'jquery'], (Ajax, TreeAccessible, Templates, $) => {\n\n    /**\n     * NodeTree Object.\n     * @param {string} id  Id of the node.\n     * @param {string} settingId Id of the setting.\n     * @param {string} label Label of the setting.\n     * @param {string} description Description of the setting.\n     * @constructor\n     */\n    let NodeTree = function(id, settingId, label, description) {\n        this.id = id;\n        this.settingId = settingId;\n        this.label = label;\n        this.description = description;\n        this.parent = null;\n        this.displayed = false;\n        this.checked = true;\n        this.level = 1;\n        this.children = [];\n        this.padding = 0;\n    };\n\n    /**\n     * Return if the node has children or not.\n     *\n     * @return {boolean}\n     */\n    NodeTree.prototype.hasChildren = function() {\n        return this.children.length > 0;\n    };\n\n    /**\n     * Return if the node is empty (without children and is category type).\n     * @return {boolean}\n     */\n    NodeTree.prototype.isEmpty = function() {\n        return this.settingId === 'category' && !this.hasChildren();\n    };\n\n    /**\n     * Accessible Tree of settings.\n     *\n     * @param {string} rootNode Element Id of the root of the tree.\n     * @constructor\n     */\n    let Tree = function(rootNode) {\n        this.view = null;\n        this.nodes = [];\n        this.accessibleview = null;\n        this.rootNode = document.getElementById(rootNode);\n    };\n\n    /**\n     * Initialise the tree.\n     *\n     * @param {array} ids Array of setting ids.\n     * @param {array} nodeids Array of node ids.\n     * @param {array} labels Array of settings labels.\n     * @param {array} descriptions Arrays of settings descriptions.\n     * @param {array} parents Arrays of setings parents.\n     */\n    Tree.prototype.init = function(ids, nodeids, labels, descriptions, parents) {\n        let nelements = ids.length;\n\n        this.rootNode.innerHTML = \"\";\n        let promises = [];\n        // Add all nodes to the Tree.\n        for (let i = 0; i < nelements; i++) {\n\n            // Create a new node.\n            let newNode = new NodeTree(\n                nodeids[i],\n                ids[i],\n                decodeURIComponent(labels[i]),\n                decodeURIComponent(descriptions[i])\n            );\n\n            this.nodes[newNode.id] = newNode;\n        }\n\n        // Associate parents and children.\n        for (let i = 0; i < nelements; i++) {\n            if (parents[i] === 'root') {\n                this.nodes[nodeids[i]].parent = null;\n            } else {\n                this.nodes[nodeids[i]].parent = this.nodes[parents[i]];\n                this.nodes[parents[i]].children.push(this.nodes[nodeids[i]]);\n            }\n        }\n\n        // Display all parent nodes.\n        for (var key in this.nodes) {\n            if (this.nodes.hasOwnProperty(key)) {\n                if (this.nodes[key].parent === null) {\n                    promises.push(this.display(key));\n                }\n            }\n        }\n\n        // Make the tree accessible.\n        Promise.all(promises).finally(() => {\n            this.accessibleview = new TreeAccessible('#' + this.rootNode.getAttribute('id'));\n        });\n    };\n\n    /**\n     * Apply the events click on the element's node and his checkbox.\n     *\n     * @param {string} nodeId Id of the node.\n     */\n    Tree.prototype.applyEvent = function(nodeId) {\n        let node = this.nodes[nodeId];\n        // If the elements is displayed.\n        if (node.displayed) {\n\n            let elementNode = document.getElementById(nodeId);\n\n            // Display all children node when is the node is clicked.\n            elementNode.addEventListener('focus', () => {\n                if (node.hasChildren()) {\n\n                    let promises = [];\n                    node.children.forEach((nodeChild) => {\n                        promises.push(this.display(nodeChild.id));\n                    });\n\n                    // Make the node accessible.\n                    Promise.all(promises).finally(() => {\n                        this.accessibleview.initialiseNodes($('#' + nodeId));\n                    });\n                }\n            });\n\n            // Change the value of mark checked when a click on the checkbox.\n            let checkboxElement = document.getElementById(nodeId + '_checkbox');\n            checkboxElement.addEventListener('click', (event) => {\n                event.stopPropagation();\n                this.setChecked(nodeId, !node.checked);\n            });\n\n            // Change the value of mark checked when the enter key is pushed.\n            elementNode.addEventListener('keydown', (event) => {\n\n                switch (event.key) {\n\n                    case \"Enter\" : {\n\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        this.setChecked(nodeId, !node.checked);\n\n                        return;\n                    }\n\n                    case \"ArrowRight\": {\n\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        if (this.accessibleview.isGroupItem($(event.target))) {\n\n                            if (this.accessibleview.isGroupCollapsed($(event.target).find('a.collapse_link'))) {\n                                let collapselink = $(event.target).find('a.collapse_link').first();\n                                collapselink.click();\n\n                                let group = $(event.target).find(\"div[role=group]\").first();\n                                group.find(\"div[role=treeitem]\").first().focus();\n                            }\n\n                        }\n                        return;\n                    }\n\n                    case \"ArrowLeft\" : {\n\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        if (this.accessibleview.isGroupItem($(event.target))) {\n\n                            if (this.accessibleview.isGroupCollapsed($(event.target).find('a.collapse_link'))) {\n                                $(event.target).parents('div[role=treeitem]').first().focus();\n                            } else {\n                                let collapselink = $(event.target).find('a.collapse_link').first();\n                                collapselink.click();\n                                collapselink.parent().focus();\n                            }\n\n                        } else {\n                            $(event.target).parents('div[role=treeitem]').first().focus();\n                        }\n\n                        return;\n                    }\n\n                    case \"ArrowDown\" : {\n\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        if ($(event.target).data('setting') === true\n                            || this.accessibleview.isGroupCollapsed($(event.target).find('a.collapse_link'))) {\n\n                            let next = $(event.target).next();\n\n                            if (next.is(\":visible\")) {\n                                next.focus();\n                            } else if ($(event.target).next().length === 0) {\n                                let parentnext = $(event.target).parents('div[role=treeitem]');\n                                parentnext.next().focus();\n                            }\n                        } else {\n\n                            let group = $(event.target).find(\"div[role=group]\").first();\n                            group.find(\"div[role=treeitem]\").first().focus();\n                        }\n\n                        return;\n                    }\n\n                    case \"ArrowUp\": {\n\n                        event.stopPropagation();\n                        event.preventDefault();\n\n                        let prev = $(event.target).prev();\n\n                        if (prev.is(\":visible\")) {\n                            prev.focus();\n                        } else if ($(event.target).prev().length === 0) {\n                            let parent = $(event.target).parents('div[role=treeitem]');\n                            parent.focus();\n                        }\n\n                        return;\n                    }\n\n                }\n            });\n        }\n    };\n\n    /**\n     * Display the Node in the DOM (create DOM element).\n     *\n     * @param {string} nodeId Id of the node.\n     * @return {Promise}\n     */\n    Tree.prototype.display = function(nodeId) {\n        return new Promise((resolve, reject) => {\n            let node = this.nodes[nodeId];\n            // If the elements is not yet displayed.\n            if (!node.displayed && !node.isEmpty()) {\n                let parentElement = null;\n                // Take the root node of the tree if the Node hasn't parent.\n                if (node.parent === null) {\n                    parentElement = this.rootNode;\n                } else {\n                    parentElement = document.getElementById(node.parent.id).querySelector('div[role=group]');\n                    this.nodes[nodeId].level = this.nodes[node.parent.id].level + 1;\n                }\n\n                let haschildren = '';\n                if (node.hasChildren()) {\n                    haschildren = 'has-children';\n                }\n\n                let checked = false;\n                if (node.checked) {\n                    checked = true;\n                }\n\n                let issetting = false;\n\n                if (node.settingId === \"setting\") {\n                    issetting = true;\n                }\n\n                // Add the new node in the DOM.\n                // Calculate padding for element.\n                if (node.level > 1) {\n                    node.padding = 20 * (node.level - 1);\n\n                    if (issetting) {\n                        node.padding = node.padding + 15;\n                    }\n                }\n\n                let newNode = {\n                    \"id\": node.id,\n                    \"level\": node.level,\n                    \"label\": node.label,\n                    \"has_children\": haschildren,\n                    \"checked\": checked,\n                    \"setting\": issetting,\n                    \"settingsnumber\": node.children.length,\n                    \"padding\": node.padding\n                };\n\n                // Add the node in the DOM.\n                Templates.render('tool_admin_presets/tree_node', newNode).then((html) => {\n                    parentElement.insertAdjacentHTML('beforeend', html);\n\n                    // Mark the node displayed.\n                    this.nodes[nodeId].displayed = true;\n\n                    // Apply click event on the element.\n                    this.applyEvent(nodeId);\n\n                    resolve(true);\n                }).fail(function(ex) {\n                    reject(false);\n                    window.console.log(ex);\n                });\n            } else {\n                resolve(true);\n            }\n        });\n    };\n\n    /**\n     * Set the property checked on the node and his children.\n     *\n     * @param {string} nodeId Id of the node.\n     * @param {boolean} checked Checking status.\n     */\n    Tree.prototype.setChecked = function(nodeId, checked) {\n        let node = this.nodes[nodeId];\n        this.nodes[nodeId].checked = checked;\n\n        // Change the checkbox apparence.\n        if (node.displayed) {\n            let checkboxElement = document.getElementById(nodeId + '_checkbox');\n            checkboxElement.checked = checked;\n            // Check the node.\n        }\n\n        // Modify all children.\n        if (node.hasChildren()) {\n            node.children.forEach((childNode) => {\n                this.setChecked(childNode.id, checked);\n            });\n        }\n    };\n\n    /**\n     * Submit the settings to the form.\n     *\n     * @param {string} buttonId Id of submit button element.\n     */\n    Tree.prototype.submit = function(buttonId) {\n        let button = document.getElementById(buttonId);\n\n        // Event on click on the submit button.\n        button.addEventListener('click', () => {\n            let settingsPresetsForm = document.getElementById(\"settings_tree_div\");\n\n            // Create all hidden input with nodes checked.\n            for (let key in this.nodes) {\n                if (this.nodes.hasOwnProperty(key)) {\n                    let node = this.nodes[key];\n                    if (document.getElementById(node.id + '_checkbox')) {\n                        let settingInput = document.getElementById(node.id + '_checkbox');\n\n                        if (settingInput.checked) {\n                            settingInput.setAttribute('value', '1');\n                        }\n                    } else if (node.settingId !== 'category' && node.settingId !== 'page' && node.checked) {\n                        let settingInput = document.createElement('input');\n                        settingInput.setAttribute('type', 'hidden');\n                        settingInput.setAttribute('name', node.id);\n                        settingInput.setAttribute('value', '1');\n                        settingsPresetsForm.appendChild(settingInput);\n                    }\n                }\n            }\n        });\n    };\n\n    /**\n     * Removes all child DOM elements of the given node from the tab order.\n     *\n     * @method removeAllFromTabOrder\n     * @param {object} node jquery object representing a node.\n     */\n    TreeAccessible.prototype.removeAllFromTabOrder = function(node) {\n        node.find('*').attr('tabindex', '-1');\n        this.getGroupFromItem($(node)).find('*').attr('tabindex', '-1');\n    };\n\n    return {\n        init: (action) => {\n\n            if (action === 'export') {\n                this.ajaxmethodname = 'tool_admin_presets_get_settings';\n            }\n            // Call ajax functions to retrieve settings.\n            Ajax.call([{\n                methodname: this.ajaxmethodname,\n                args: {}\n            }], true, true)[0].done((response) => {\n                    // Make the tree with settings retrieved.\n                    let tree = new Tree('settings_tree_div');\n                    tree.init(response.ids,\n                        response.nodes,\n                        response.labels,\n                        response.descriptions,\n                        response.parents);\n\n                    // Set the submit event.\n                    tree.submit('id_submitbutton');\n                }\n            );\n        }\n    };\n});\n"],"names":["define","Ajax","TreeAccessible","Templates","$","NodeTree","id","settingId","label","description","parent","displayed","checked","level","children","padding","prototype","hasChildren","this","length","isEmpty","Tree","rootNode","view","nodes","accessibleview","document","getElementById","init","ids","nodeids","labels","descriptions","parents","nelements","innerHTML","promises","i","newNode","decodeURIComponent","push","key","hasOwnProperty","display","Promise","all","finally","getAttribute","applyEvent","nodeId","node","elementNode","addEventListener","forEach","nodeChild","initialiseNodes","event","stopPropagation","setChecked","preventDefault","isGroupItem","target","isGroupCollapsed","find","first","click","focus","collapselink","data","next","is","prev","resolve","reject","parentElement","querySelector","haschildren","issetting","render","then","html","insertAdjacentHTML","fail","ex","window","console","log","childNode","submit","buttonId","settingsPresetsForm","settingInput","setAttribute","createElement","appendChild","removeAllFromTabOrder","attr","getGroupFromItem","action","ajaxmethodname","call","methodname","args","done","response","tree"],"mappings":"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"}